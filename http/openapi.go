// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package http

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Book defines model for Book.
type Book struct {
	Isbn  int64  `json:"isbn"`
	Title string `json:"title"`
}

// BookList defines model for BookList.
type BookList struct {
	Items         []Book `json:"items"`
	NextPageToken string `json:"next_page_token"`
}

// BookPartial defines model for BookPartial.
type BookPartial struct {
	Title string `json:"title"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Isbn defines model for isbn.
type Isbn = int64

// PageToken defines model for pageToken.
type PageToken = string

// TotalSize defines model for totalSize.
type TotalSize = int32

// ListBooksParams defines parameters for ListBooks.
type ListBooksParams struct {
	// PageToken a pagination placeholder
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// TotalSize a pagination limit
	TotalSize *TotalSize `form:"total_size,omitempty" json:"total_size,omitempty"`
}

// CreateBookJSONRequestBody defines body for CreateBook for application/json ContentType.
type CreateBookJSONRequestBody = Book

// UpdateBookJSONRequestBody defines body for UpdateBook for application/json ContentType.
type UpdateBookJSONRequestBody = BookPartial

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List books in the library
	// (GET /books)
	ListBooks(w http.ResponseWriter, r *http.Request, params ListBooksParams)
	// Create a book.
	// (POST /books)
	CreateBook(w http.ResponseWriter, r *http.Request)
	// Delete a single book from the library
	// (DELETE /books/{isbn})
	DeleteBook(w http.ResponseWriter, r *http.Request, isbn Isbn)
	// Fetch a single book in the library
	// (GET /books/{isbn})
	FetchBook(w http.ResponseWriter, r *http.Request, isbn Isbn)
	// Update a book.
	// (PUT /books/{isbn})
	UpdateBook(w http.ResponseWriter, r *http.Request, isbn Isbn)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListBooks operation middleware
func (siw *ServerInterfaceWrapper) ListBooks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBooksParams

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_token", Err: err})
		return
	}

	// ------------- Optional query parameter "total_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "total_size", r.URL.Query(), &params.TotalSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "total_size", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBooks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateBook operation middleware
func (siw *ServerInterfaceWrapper) CreateBook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBook(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBook operation middleware
func (siw *ServerInterfaceWrapper) DeleteBook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "isbn" -------------
	var isbn Isbn

	err = runtime.BindStyledParameterWithLocation("simple", false, "isbn", runtime.ParamLocationPath, chi.URLParam(r, "isbn"), &isbn)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "isbn", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBook(w, r, isbn)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FetchBook operation middleware
func (siw *ServerInterfaceWrapper) FetchBook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "isbn" -------------
	var isbn Isbn

	err = runtime.BindStyledParameterWithLocation("simple", false, "isbn", runtime.ParamLocationPath, chi.URLParam(r, "isbn"), &isbn)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "isbn", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchBook(w, r, isbn)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateBook operation middleware
func (siw *ServerInterfaceWrapper) UpdateBook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "isbn" -------------
	var isbn Isbn

	err = runtime.BindStyledParameterWithLocation("simple", false, "isbn", runtime.ParamLocationPath, chi.URLParam(r, "isbn"), &isbn)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "isbn", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateBook(w, r, isbn)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/books", wrapper.ListBooks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/books", wrapper.CreateBook)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/books/{isbn}", wrapper.DeleteBook)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/books/{isbn}", wrapper.FetchBook)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/books/{isbn}", wrapper.UpdateBook)
	})

	return r
}
