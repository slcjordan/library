// Code generated by MockGen. DO NOT EDIT.
// Source: http.go

// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	library "github.com/slcjordan/library"
)

// MockListBooksController is a mock of ListBooksController interface.
type MockListBooksController struct {
	ctrl     *gomock.Controller
	recorder *MockListBooksControllerMockRecorder
}

// MockListBooksControllerMockRecorder is the mock recorder for MockListBooksController.
type MockListBooksControllerMockRecorder struct {
	mock *MockListBooksController
}

// NewMockListBooksController creates a new mock instance.
func NewMockListBooksController(ctrl *gomock.Controller) *MockListBooksController {
	mock := &MockListBooksController{ctrl: ctrl}
	mock.recorder = &MockListBooksControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListBooksController) EXPECT() *MockListBooksControllerMockRecorder {
	return m.recorder
}

// ListBooks mocks base method.
func (m *MockListBooksController) ListBooks(ctx context.Context, PageToken string, TotalSize int32) (library.BookList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", ctx, PageToken, TotalSize)
	ret0, _ := ret[0].(library.BookList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockListBooksControllerMockRecorder) ListBooks(ctx, PageToken, TotalSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockListBooksController)(nil).ListBooks), ctx, PageToken, TotalSize)
}

// MockBookCRUDController is a mock of BookCRUDController interface.
type MockBookCRUDController struct {
	ctrl     *gomock.Controller
	recorder *MockBookCRUDControllerMockRecorder
}

// MockBookCRUDControllerMockRecorder is the mock recorder for MockBookCRUDController.
type MockBookCRUDControllerMockRecorder struct {
	mock *MockBookCRUDController
}

// NewMockBookCRUDController creates a new mock instance.
func NewMockBookCRUDController(ctrl *gomock.Controller) *MockBookCRUDController {
	mock := &MockBookCRUDController{ctrl: ctrl}
	mock.recorder = &MockBookCRUDControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookCRUDController) EXPECT() *MockBookCRUDControllerMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookCRUDController) CreateBook(ctx context.Context, book library.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookCRUDControllerMockRecorder) CreateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookCRUDController)(nil).CreateBook), ctx, book)
}

// DeleteBook mocks base method.
func (m *MockBookCRUDController) DeleteBook(ctx context.Context, isbn int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, isbn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookCRUDControllerMockRecorder) DeleteBook(ctx, isbn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookCRUDController)(nil).DeleteBook), ctx, isbn)
}

// GetBook mocks base method.
func (m *MockBookCRUDController) GetBook(ctx context.Context, isbn int64) (library.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, isbn)
	ret0, _ := ret[0].(library.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookCRUDControllerMockRecorder) GetBook(ctx, isbn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookCRUDController)(nil).GetBook), ctx, isbn)
}

// UpdateBook mocks base method.
func (m *MockBookCRUDController) UpdateBook(ctx context.Context, book library.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookCRUDControllerMockRecorder) UpdateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookCRUDController)(nil).UpdateBook), ctx, book)
}
